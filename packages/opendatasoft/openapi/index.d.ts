/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/catalog/datasets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Query catalog datasets
     * @description Retrieve available datasets.
     */
    get: operations["getDatasets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/exports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List export formats
     * @description List available export formats
     */
    get: operations["listExportFormats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/exports/{format}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a catalog
     * @description Export a catalog in the desired format.
     */
    get: operations["exportDatasets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/exports/csv": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a catalog in CSV
     * @description Export a catalog in CSV (Comma Separated Values). Specific parameters are described here
     */
    get: operations["exportCatalogCSV"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/exports/dcat{dcat_ap_format}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a catalog in RDF/XML (DCAT)
     * @description Export a catalog in RDF/XML described with DCAT (Data Catalog Vocabulary). Specific parameters are described here
     */
    get: operations["exportCatalogDCAT"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/facets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List facet values
     * @description Enumerate facet values for datasets and returns a list of values for each facet.
     *     Can be used to implement guided navigation in large result sets.
     */
    get: operations["getDatasetsFacets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/records": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Query dataset records
     * @description Perform a query on dataset records.
     */
    get: operations["getRecords"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/exports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List export formats
     * @description List available export formats
     */
    get: operations["listDatasetExportFormats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/exports/{format}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a dataset
     * @description Export a dataset in the desired format.
     *     **Note:** The `group_by` parameter is only available on exports starting with the v2.1
     */
    get: operations["exportRecords"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/exports/csv": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a dataset in CSV
     * @description Export a dataset in CSV (Comma Separated Values). Specific parameters are described here
     */
    get: operations["exportRecordsCSV"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/exports/parquet": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a dataset in Parquet
     * @description Export a dataset in Parquet. Specific parameters are described here
     */
    get: operations["exportRecordsParquet"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/exports/gpx": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export a dataset in GPX
     * @description Export a dataset in GPX. Specific parameters are described here
     */
    get: operations["exportRecordsGPX"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Show dataset information
     * @description Returns a list of available endpoints for the specified dataset, with metadata and endpoints.
     *
     *     The response includes the following links:
     *     * the attachments endpoint
     *     * the files endpoint
     *     * the records endpoint
     *     * the catalog endpoint.
     */
    get: operations["getDataset"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/facets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List dataset facets
     * @description Enumerates facet values for records and returns a list of values for each facet.
     *     Can be used to implement guided navigation in large result sets.
     *
     */
    get: operations["getRecordsFacets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/attachments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List dataset attachments
     * @description Returns a list of all available attachments for a dataset.
     *
     */
    get: operations["getDatasetAttachments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/catalog/datasets/{dataset_id}/records/{record_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Read a dataset record
     * @description Reads a single dataset record based on its identifier.
     *
     */
    get: operations["getRecord"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    links: {
      /** Format: uri */
      href?: string;
      /** @enum {string} */
      rel?: "self" | "first" | "last" | "next" | "dataset" | "catalog";
    };
    dataset: {
      _links?: components["schemas"]["links"][];
      dataset_id?: string;
      readonly dataset_uid?: string;
      attachments?: {
        mimetype?: string;
        url?: string;
        id?: string;
        title?: string;
      }[];
      has_records?: boolean;
      data_visible?: boolean;
      /** @description A map of available features for a dataset, with the fields they apply to.
       *      */
      features?: string[];
      metas?: Record<string, never>;
      fields?: {
        name?: string;
        label?: string;
        type?: string;
        annotations?: Record<string, never>;
        description?: string | null;
      }[];
    } & {
      [key: string]: unknown;
    };
    datasets: {
      total_count?: number;
      _links?: components["schemas"]["links"][];
      results?: components["schemas"]["dataset"][];
    };
    /** @enum {string} */
    "enum-format-datasets":
      | "csv"
      | "fgb"
      | "geojson"
      | "gpx"
      | "json"
      | "jsonl"
      | "jsonld"
      | "kml"
      | "n3"
      | "ov2"
      | "parquet"
      | "rdfxml"
      | "shp"
      | "turtle"
      | "xlsx";
    facet_value_enumeration: {
      name?: string;
      count?: number;
      value?: string;
      state?: string;
    };
    facet_enumeration: {
      name?: string;
      facets?: components["schemas"]["facet_value_enumeration"][];
    };
    record: {
      _id?: string;
      /** Format: dateTime */
      _timestamp?: string;
      /** Format: int64 */
      _size?: number;
      _links?: components["schemas"]["links"][];
    } & {
      [key: string]: Record<string, never>;
    };
    records: {
      total_count?: number;
      _links?: components["schemas"]["links"][];
      results?: components["schemas"]["record"][];
    };
    attachment: {
      href?: string;
      metas?: {
        "mime-type"?: string;
        title?: string;
        url?: string;
        id?: string;
      };
    };
  };
  responses: {
    /** @description Bad Request */
    bad_request: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json; charset=utf-8": {
          message: string;
          error_code: string;
        };
      };
    };
    /** @description Too many requests */
    quota: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json; charset=utf-8": {
          errorcode: number;
          reset_time: string;
          limit_time_unit: string;
          call_limit: number;
          error: string;
        };
      };
    };
  };
  parameters: {
    /** @description Examples:
     *     - `select=size` - Example of select, which only return the "size" field.
     *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
     *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
     *
     *     A select expression can be used to add, remove or change the fields to return.
     *     An expression can be:
     *       - a wildcard ('*'): all fields are returned.
     *       - A field name: only the specified field is returned.
     *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
     *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
    select: string;
    /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
     *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
     *
     *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
    where: string;
    /** @description Example: `order_by=sum(age) desc, name asc`
     *
     *     A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).
     *
     *     Results are sorted in ascending order by default. To sort results in descending order, use the `desc` keyword. */
    order_by: string;
    /** @description Number of items to return.
     *
     *     To use with the `offset` parameter to implement pagination.
     *
     *     The maximum possible value depends on whether the query contains a `group_by` clause or not.
     *
     *     For a query **without** a `group_by`:
     *       - the maximum value for `limit` is 100,
     *       - `offset+limit` should be less than 10000
     *
     *     For a query **with** a `group_by`:
     *       - the maximum value for `limit` is 20000,
     *       - `offset+limit` should be less than 20000
     *
     *     **Note:** If you need more results, please use the /exports endpoint.
     *      */
    limit: number;
    /** @description Index of the first item to return (starting at 0).
     *
     *     To use with the `limit` parameter to implement pagination.
     *
     *     **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
     *      */
    offset: number;
    /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
     *
     *     A facet filter used to limit the result set.
     *     Using this parameter, you can refine your query to display only the selected facet value in the response.
     *
     *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
     *
     *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
     *
     *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
    refine: string;
    /** @description Examples:
     *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
     *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
     *
     *     A facet filter used to exclude a facet value from the result set.
     *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
     *
     *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
     *
     *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
    exclude: string;
    /** @description A language value.
     *
     *     If specified, the `lang` value override the default language, which is "fr".
     *     The language is used to format string, for example in the `date_format` function. */
    lang:
      | "en"
      | "fr"
      | "nl"
      | "pt"
      | "it"
      | "ar"
      | "de"
      | "es"
      | "ca"
      | "eu"
      | "sv";
    /** @description Set the timezone for datetime fields.
     *
     *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
    timezone: string;
    /** @description Example: `group_by=city_field as city`
     *
     *     A group by expression defines a grouping function for an aggregation.
     *     It can be:
     *      - a field name: group result by each value of this field
     *      - a range function: group result by range
     *      - a date function: group result by date
     *
     *     It is possible to specify a custom name with the 'as name' notation. */
    group_by: string;
    /** @description If set to `true`, this parameter will add HATEOAS links in the response.
     *      */
    include_links: boolean;
    /** @description If set to `true`, this parameter will add application metadata to the response.
     *      */
    include_app_metas: boolean;
    "format-catalog":
      | "csv"
      | "data.json"
      | "dcat"
      | "dcat_ap_ch"
      | "dcat_ap_de"
      | "dcat_ap_se"
      | "dcat_ap_sp"
      | "dcat_ap_it"
      | "dcat_ap_vl"
      | "dcat_ap_benap"
      | "dublin_core"
      | "json"
      | "rdf"
      | "rss"
      | "ttl"
      | "xlsx";
    /** @description Number of items to return in export.
     *
     *     Use -1 (default) to retrieve all records
     *      */
    limit_export: number;
    dcat_format:
      | "_ap_ch"
      | "_ap_de"
      | "_ap_se"
      | "_ap_sp"
      | "_ap_it"
      | "_ap_vl"
      | "_ap_benap";
    /** @description A facet is a field used for simple filtering (through the `refine` and `exclude` parameters) or exploration (with the `/facets` endpoint).
     *
     *     It can also be a function such as `facet=facet(name="field_name")` which is identical to `facet=field_name`. But this `facet()` function
     *     can also take some optional arguments such as `disjunctive`, `hierarchical`, `separator`, `sort` and `limit`.
     *
     *     * `disjunctive`: a boolean `true/false`, whether multiple values can be selected for the facet
     *     * `hierarchical`: a boolean `true/false` if the field is hierarchical. The separator must be given as the argument.
     *        For instance, you can do `facet=facet(name="filepath", hierarchical=true, separator="/")` to retrieve facets related to this field which might look like `"/home/user/file.txt"`
     *     * `separator`: a string, e.g. `/`, `-`, `;`
     *     * `sort`: a string which describes how to sort the facets. Possible arguments are `count` and `-count` for all field types, `alphanum` and `-alphanum` for `date`, `datetime` and `text`, `num` and `-num` for `decimal` and `int`
     *     * `limit`: an integer to limit the number of results
     *      */
    facet: string;
    /** @description The identifier of the dataset to be queried.
     *
     *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
    dataset_id: string;
    "format-datasets": components["schemas"]["enum-format-datasets"];
    /** @description If set to `true`, this parameter will make exports output the label of each field rather than its name.
     *
     *     This parameter only makes sense for formats that contain a list of the fields in their output.
     *      */
    use_labels: boolean;
    /** @description If set to `true`, this parameter can compress the output file of a specific export format with GZIP, e.g. `.csv.gzip`.
     *      */
    compressed: boolean;
    /** @description This parameter sets the EPSG code to project shapes into for formats that support geometric features.
     *      */
    epsg: number;
    /** @description Record identifier */
    record_id: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getDatasets: {
    parameters: {
      query?: {
        /** @description Examples:
         *     - `select=size` - Example of select, which only return the "size" field.
         *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
         *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
         *
         *     A select expression can be used to add, remove or change the fields to return.
         *     An expression can be:
         *       - a wildcard ('*'): all fields are returned.
         *       - A field name: only the specified field is returned.
         *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
         *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
        select?: components["parameters"]["select"];
        /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
         *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
         *
         *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
        where?: components["parameters"]["where"];
        /** @description Example: `order_by=sum(age) desc, name asc`
         *
         *     A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).
         *
         *     Results are sorted in ascending order by default. To sort results in descending order, use the `desc` keyword. */
        order_by?: components["parameters"]["order_by"];
        /** @description Number of items to return.
         *
         *     To use with the `offset` parameter to implement pagination.
         *
         *     The maximum possible value depends on whether the query contains a `group_by` clause or not.
         *
         *     For a query **without** a `group_by`:
         *       - the maximum value for `limit` is 100,
         *       - `offset+limit` should be less than 10000
         *
         *     For a query **with** a `group_by`:
         *       - the maximum value for `limit` is 20000,
         *       - `offset+limit` should be less than 20000
         *
         *     **Note:** If you need more results, please use the /exports endpoint.
         *      */
        limit?: components["parameters"]["limit"];
        /** @description Index of the first item to return (starting at 0).
         *
         *     To use with the `limit` parameter to implement pagination.
         *
         *     **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
         *      */
        offset?: components["parameters"]["offset"];
        /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
         *
         *     A facet filter used to limit the result set.
         *     Using this parameter, you can refine your query to display only the selected facet value in the response.
         *
         *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
         *
         *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
         *
         *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
        refine?: components["parameters"]["refine"];
        /** @description Examples:
         *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
         *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
         *
         *     A facet filter used to exclude a facet value from the result set.
         *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
         *
         *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
         *
         *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
        exclude?: components["parameters"]["exclude"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
        /** @description Example: `group_by=city_field as city`
         *
         *     A group by expression defines a grouping function for an aggregation.
         *     It can be:
         *      - a field name: group result by each value of this field
         *      - a range function: group result by range
         *      - a date function: group result by date
         *
         *     It is possible to specify a custom name with the 'as name' notation. */
        group_by?: components["parameters"]["group_by"];
        /** @description If set to `true`, this parameter will add HATEOAS links in the response.
         *      */
        include_links?: components["parameters"]["include_links"];
        /** @description If set to `true`, this parameter will add application metadata to the response.
         *      */
        include_app_metas?: components["parameters"]["include_app_metas"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of available datasets */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["datasets"];
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listExportFormats: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of available export formats */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": {
            links?: components["schemas"]["links"][];
          };
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportDatasets: {
    parameters: {
      query?: {
        /** @description Examples:
         *     - `select=size` - Example of select, which only return the "size" field.
         *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
         *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
         *
         *     A select expression can be used to add, remove or change the fields to return.
         *     An expression can be:
         *       - a wildcard ('*'): all fields are returned.
         *       - A field name: only the specified field is returned.
         *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
         *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
        select?: components["parameters"]["select"];
        /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
         *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
         *
         *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
        where?: components["parameters"]["where"];
        /** @description Example: `order_by=sum(age) desc, name asc`
         *
         *     A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).
         *
         *     Results are sorted in ascending order by default. To sort results in descending order, use the `desc` keyword. */
        order_by?: components["parameters"]["order_by"];
        /** @description Example: `group_by=city_field as city`
         *
         *     A group by expression defines a grouping function for an aggregation.
         *     It can be:
         *      - a field name: group result by each value of this field
         *      - a range function: group result by range
         *      - a date function: group result by date
         *
         *     It is possible to specify a custom name with the 'as name' notation. */
        group_by?: components["parameters"]["group_by"];
        /** @description Number of items to return in export.
         *
         *     Use -1 (default) to retrieve all records
         *      */
        limit?: components["parameters"]["limit_export"];
        /** @description Index of the first item to return (starting at 0).
         *
         *     To use with the `limit` parameter to implement pagination.
         *
         *     **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
         *      */
        offset?: components["parameters"]["offset"];
        /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
         *
         *     A facet filter used to limit the result set.
         *     Using this parameter, you can refine your query to display only the selected facet value in the response.
         *
         *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
         *
         *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
         *
         *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
        refine?: components["parameters"]["refine"];
        /** @description Examples:
         *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
         *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
         *
         *     A facet filter used to exclude a facet value from the result set.
         *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
         *
         *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
         *
         *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
        exclude?: components["parameters"]["exclude"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
      };
      header?: never;
      path: {
        format: components["parameters"]["format-catalog"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportCatalogCSV: {
    parameters: {
      query?: {
        /** @description Sets the field delimiter of the CSV export */
        delimiter?: ";" | "," | "\t" | "|";
        /** @description Sets the separator character used for multivalued strings */
        list_separator?: string;
        /** @description Set it to true to force quoting all strings, i.e. surrounding all strings with quote characters */
        quote_all?: boolean;
        /** @description Set it to true to force the first characters of the CSV file to be a Unicode Byte Order Mask (0xFEFF). It usually makes Excel correctly open the output CSV file without warning.
         *     **Warning:** the default value of this parameter is `false` in v2.0 and `true` starting with v2.1 */
        with_bom?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportCatalogDCAT: {
    parameters: {
      query?: {
        /** @description Sets the datasets exports exposed in the DCAT export. By default, all exports are exposed. */
        include_exports?: components["schemas"]["enum-format-datasets"];
        /** @description If set to `true`, this parameter will make distributions output the label of each field rather than its name. This parameter only applies on distributions that contain a list of the fields in their output (e.g., CSV, XLSX). */
        use_labels_in_exports?: boolean;
      };
      header?: never;
      path: {
        dcat_ap_format: components["parameters"]["dcat_format"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getDatasetsFacets: {
    parameters: {
      query?: {
        /** @description A facet is a field used for simple filtering (through the `refine` and `exclude` parameters) or exploration (with the `/facets` endpoint).
         *
         *     It can also be a function such as `facet=facet(name="field_name")` which is identical to `facet=field_name`. But this `facet()` function
         *     can also take some optional arguments such as `disjunctive`, `hierarchical`, `separator`, `sort` and `limit`.
         *
         *     * `disjunctive`: a boolean `true/false`, whether multiple values can be selected for the facet
         *     * `hierarchical`: a boolean `true/false` if the field is hierarchical. The separator must be given as the argument.
         *        For instance, you can do `facet=facet(name="filepath", hierarchical=true, separator="/")` to retrieve facets related to this field which might look like `"/home/user/file.txt"`
         *     * `separator`: a string, e.g. `/`, `-`, `;`
         *     * `sort`: a string which describes how to sort the facets. Possible arguments are `count` and `-count` for all field types, `alphanum` and `-alphanum` for `date`, `datetime` and `text`, `num` and `-num` for `decimal` and `int`
         *     * `limit`: an integer to limit the number of results
         *      */
        facet?: components["parameters"]["facet"];
        /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
         *
         *     A facet filter used to limit the result set.
         *     Using this parameter, you can refine your query to display only the selected facet value in the response.
         *
         *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
         *
         *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
         *
         *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
        refine?: components["parameters"]["refine"];
        /** @description Examples:
         *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
         *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
         *
         *     A facet filter used to exclude a facet value from the result set.
         *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
         *
         *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
         *
         *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
        exclude?: components["parameters"]["exclude"];
        /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
         *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
         *
         *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
        where?: components["parameters"]["where"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An enumeration of facets */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": {
            links?: components["schemas"]["links"][];
            facets?: components["schemas"]["facet_enumeration"][];
          };
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getRecords: {
    parameters: {
      query?: {
        /** @description Examples:
         *     - `select=size` - Example of select, which only return the "size" field.
         *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
         *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
         *
         *     A select expression can be used to add, remove or change the fields to return.
         *     An expression can be:
         *       - a wildcard ('*'): all fields are returned.
         *       - A field name: only the specified field is returned.
         *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
         *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
        select?: components["parameters"]["select"];
        /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
         *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
         *
         *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
        where?: components["parameters"]["where"];
        /** @description Example: `group_by=city_field as city`
         *
         *     A group by expression defines a grouping function for an aggregation.
         *     It can be:
         *      - a field name: group result by each value of this field
         *      - a range function: group result by range
         *      - a date function: group result by date
         *
         *     It is possible to specify a custom name with the 'as name' notation. */
        group_by?: components["parameters"]["group_by"];
        /** @description Example: `order_by=sum(age) desc, name asc`
         *
         *     A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).
         *
         *     Results are sorted in ascending order by default. To sort results in descending order, use the `desc` keyword. */
        order_by?: components["parameters"]["order_by"];
        /** @description Number of items to return.
         *
         *     To use with the `offset` parameter to implement pagination.
         *
         *     The maximum possible value depends on whether the query contains a `group_by` clause or not.
         *
         *     For a query **without** a `group_by`:
         *       - the maximum value for `limit` is 100,
         *       - `offset+limit` should be less than 10000
         *
         *     For a query **with** a `group_by`:
         *       - the maximum value for `limit` is 20000,
         *       - `offset+limit` should be less than 20000
         *
         *     **Note:** If you need more results, please use the /exports endpoint.
         *      */
        limit?: components["parameters"]["limit"];
        /** @description Index of the first item to return (starting at 0).
         *
         *     To use with the `limit` parameter to implement pagination.
         *
         *     **Note:** the maximum value depends on the type of query, see the note on `limit` for the details
         *      */
        offset?: components["parameters"]["offset"];
        /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
         *
         *     A facet filter used to limit the result set.
         *     Using this parameter, you can refine your query to display only the selected facet value in the response.
         *
         *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
         *
         *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
         *
         *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
        refine?: components["parameters"]["refine"];
        /** @description Examples:
         *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
         *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
         *
         *     A facet filter used to exclude a facet value from the result set.
         *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
         *
         *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
         *
         *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
        exclude?: components["parameters"]["exclude"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
        /** @description If set to `true`, this parameter will add HATEOAS links in the response.
         *      */
        include_links?: components["parameters"]["include_links"];
        /** @description If set to `true`, this parameter will add application metadata to the response.
         *      */
        include_app_metas?: components["parameters"]["include_app_metas"];
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Records */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["records"];
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listDatasetExportFormats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of available export formats */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": {
            links?: components["schemas"]["links"][];
          };
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportRecords: {
    parameters: {
      query?: {
        /** @description Examples:
         *     - `select=size` - Example of select, which only return the "size" field.
         *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
         *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
         *
         *     A select expression can be used to add, remove or change the fields to return.
         *     An expression can be:
         *       - a wildcard ('*'): all fields are returned.
         *       - A field name: only the specified field is returned.
         *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
         *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
        select?: components["parameters"]["select"];
        /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
         *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
         *
         *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
        where?: components["parameters"]["where"];
        /** @description Example: `order_by=sum(age) desc, name asc`
         *
         *     A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).
         *
         *     Results are sorted in ascending order by default. To sort results in descending order, use the `desc` keyword. */
        order_by?: components["parameters"]["order_by"];
        /** @description Example: `group_by=city_field as city`
         *
         *     A group by expression defines a grouping function for an aggregation.
         *     It can be:
         *      - a field name: group result by each value of this field
         *      - a range function: group result by range
         *      - a date function: group result by date
         *
         *     It is possible to specify a custom name with the 'as name' notation. */
        group_by?: components["parameters"]["group_by"];
        /** @description Number of items to return in export.
         *
         *     Use -1 (default) to retrieve all records
         *      */
        limit?: components["parameters"]["limit_export"];
        /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
         *
         *     A facet filter used to limit the result set.
         *     Using this parameter, you can refine your query to display only the selected facet value in the response.
         *
         *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
         *
         *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
         *
         *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
        refine?: components["parameters"]["refine"];
        /** @description Examples:
         *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
         *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
         *
         *     A facet filter used to exclude a facet value from the result set.
         *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
         *
         *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
         *
         *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
        exclude?: components["parameters"]["exclude"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
        /** @description If set to `true`, this parameter will make exports output the label of each field rather than its name.
         *
         *     This parameter only makes sense for formats that contain a list of the fields in their output.
         *      */
        use_labels?: components["parameters"]["use_labels"];
        /** @description If set to `true`, this parameter can compress the output file of a specific export format with GZIP, e.g. `.csv.gzip`.
         *      */
        compressed?: components["parameters"]["compressed"];
        /** @description This parameter sets the EPSG code to project shapes into for formats that support geometric features.
         *      */
        epsg?: components["parameters"]["epsg"];
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
        format: components["parameters"]["format-datasets"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportRecordsCSV: {
    parameters: {
      query?: {
        /** @description Sets the field delimiter of the CSV export */
        delimiter?: ";" | "," | "\t" | "|";
        /** @description Sets the separator character used for multivalued strings */
        list_separator?: string;
        /** @description Set it to true to force quoting all strings, i.e. surrounding all strings with quote characters */
        quote_all?: boolean;
        /** @description Set it to true to force the first characters of the CSV file to be a Unicode Byte Order Mask (0xFEFF). It usually makes Excel correctly open the output CSV file without warning.
         *     **Warning:** the default value of this parameter is `false` in v2.0 and `true` starting with v2.1 */
        with_bom?: boolean;
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportRecordsParquet: {
    parameters: {
      query?: {
        /** @description Sets the compression parameter for the Parquet export file */
        parquet_compression?: "snappy" | "zstd";
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  exportRecordsGPX: {
    parameters: {
      query?: {
        /** @description Sets the field that is used as the 'name' attribute in the GPX output */
        name_field?: string;
        /** @description Sets the fields to use in the 'description' attribute of the GPX output */
        description_field_list?: string;
        /** @description Set it to true to use the `<extension>` tag for attributes (as GDAL does). Set it to false to use the `<desc>` tag for attributes.
         *     **Warning:** the default value of this parameter is `false` in v2.0 and `true` starting with v2.1 */
        use_extension?: boolean;
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return a file */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getDataset: {
    parameters: {
      query?: {
        /** @description Examples:
         *     - `select=size` - Example of select, which only return the "size" field.
         *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
         *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
         *
         *     A select expression can be used to add, remove or change the fields to return.
         *     An expression can be:
         *       - a wildcard ('*'): all fields are returned.
         *       - A field name: only the specified field is returned.
         *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
         *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
        select?: components["parameters"]["select"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
        /** @description If set to `true`, this parameter will add HATEOAS links in the response.
         *      */
        include_links?: components["parameters"]["include_links"];
        /** @description If set to `true`, this parameter will add application metadata to the response.
         *      */
        include_app_metas?: components["parameters"]["include_app_metas"];
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The dataset */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8json": components["schemas"]["dataset"];
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getRecordsFacets: {
    parameters: {
      query?: {
        /** @description A `where` filter is a text expression performing a simple full-text search that can also include logical operations
         *     (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.
         *
         *     For more information, see [Opendatasoft Query Language (ODSQL)](<https://help.opendatasoft.com/apis/ods-explore-v2/#section/Opendatasoft-Query-Language-(ODSQL)/Where-clause>) reference documentation. */
        where?: components["parameters"]["where"];
        /** @description Example: `refine=modified:2020` - Return only the value `2020` from the `modified` facet.
         *
         *     A facet filter used to limit the result set.
         *     Using this parameter, you can refine your query to display only the selected facet value in the response.
         *
         *     Refinement uses the following syntax: `refine=<FACETNAME>:<FACETVALUE>`
         *
         *     For date, and other hierarchical facets, when refining on one value, all second-level values related to that entry will appear in facets enumeration. For example, after refining on the year 2019, the related second-level month will appear. And when refining on August 2019, the third-level day will appear.
         *
         *     **`refine` must not be confused with a `where` filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.** */
        refine?: components["parameters"]["refine"];
        /** @description Examples:
         *     - `exclude=city:Paris` - Exclude the value `Paris` from the `city` facet. Facets enumeration will display `Paris` as `excluded` without any count information.
         *     - `exclude=modified:2019/12` - Exclude the value `2019/12` from the `modified` facet. Facets enumeration will display `2020` as `excluded` without any count information.
         *
         *     A facet filter used to exclude a facet value from the result set.
         *     Using this parameter, you can filter your query to exclude the selected facet value in the response.
         *
         *     `exclude` uses the following syntax: `exclude=<FACETNAME>:<FACETVALUE>`
         *
         *     **`exclude` must not be confused with a `where` filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.** */
        exclude?: components["parameters"]["exclude"];
        /** @description A facet is a field used for simple filtering (through the `refine` and `exclude` parameters) or exploration (with the `/facets` endpoint).
         *
         *     It can also be a function such as `facet=facet(name="field_name")` which is identical to `facet=field_name`. But this `facet()` function
         *     can also take some optional arguments such as `disjunctive`, `hierarchical`, `separator`, `sort` and `limit`.
         *
         *     * `disjunctive`: a boolean `true/false`, whether multiple values can be selected for the facet
         *     * `hierarchical`: a boolean `true/false` if the field is hierarchical. The separator must be given as the argument.
         *        For instance, you can do `facet=facet(name="filepath", hierarchical=true, separator="/")` to retrieve facets related to this field which might look like `"/home/user/file.txt"`
         *     * `separator`: a string, e.g. `/`, `-`, `;`
         *     * `sort`: a string which describes how to sort the facets. Possible arguments are `count` and `-count` for all field types, `alphanum` and `-alphanum` for `date`, `datetime` and `text`, `num` and `-num` for `decimal` and `int`
         *     * `limit`: an integer to limit the number of results
         *      */
        facet?: components["parameters"]["facet"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Facets enumeration */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": {
            links?: components["schemas"]["links"][];
            facets?: components["schemas"]["facet_enumeration"][];
          };
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getDatasetAttachments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of all available attachments */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": {
            links?: components["schemas"]["links"][];
            attachments?: components["schemas"]["attachment"][];
          };
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getRecord: {
    parameters: {
      query?: {
        /** @description Examples:
         *     - `select=size` - Example of select, which only return the "size" field.
         *     - `select=size * 2 as bigger_size` - Example of a complex expression with a label, which returns a new field named "bigger_size" and containing the double of size field value.
         *     - `select=dataset_id, fields` - Example of a select in catalog ODSQL query to only retrieve dataset_id and schema of datasets.
         *
         *     A select expression can be used to add, remove or change the fields to return.
         *     An expression can be:
         *       - a wildcard ('*'): all fields are returned.
         *       - A field name: only the specified field is returned.
         *       - An include/exclude function: All fields matching the include or exclude expression are included or excluded. This expression can contain wildcard.
         *       - A complex expression. The result of the expression is returned. A label can be set for this expression, and in that case, the field will be named after this label. */
        select?: components["parameters"]["select"];
        /** @description A language value.
         *
         *     If specified, the `lang` value override the default language, which is "fr".
         *     The language is used to format string, for example in the `date_format` function. */
        lang?: components["parameters"]["lang"];
        /** @description Set the timezone for datetime fields.
         *
         *     Timezone IDs are defined by the [Unicode CLDR project](https://github.com/unicode-org/cldr). The list of timezone IDs is available in [timezone.xml](https://github.com/unicode-org/cldr/blob/master/common/bcp47/timezone.xml). */
        timezone?: components["parameters"]["timezone"];
      };
      header?: never;
      path: {
        /** @description The identifier of the dataset to be queried.
         *
         *     You can find it in the "Information" tab of the dataset page or in the dataset URL, right after `/datasets/`. */
        dataset_id: components["parameters"]["dataset_id"];
        /** @description Record identifier */
        record_id: components["parameters"]["record_id"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A single record */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json; charset=utf-8": components["schemas"]["record"];
        };
      };
      400: components["responses"]["bad_request"];
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      429: components["responses"]["quota"];
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
