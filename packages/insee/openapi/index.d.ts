/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/siren": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche multicritère d'unités légales */
    get: operations["findByGetUniteLegale"];
    put?: never;
    /** Recherche multicritère d'unités légales */
    post: operations["findByPostUniteLegale"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/siren/{siren}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Recherche d'une unité légale par son numéro Siren
     * @description Recherche d'une unité légale par son numéro Siren (9 chiffres)
     */
    get: operations["findBySiren"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/siret": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche multicritère d'établissements */
    get: operations["findByGetEtablissement"];
    put?: never;
    /** Recherche multicritère d'établissements */
    post: operations["findByPostEtablissement"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/siret/{siret}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Recherche d'un établissement par son numéro Siret
     * @description Recherche d'un établissement par son numéro Siret (14 chiffres)
     */
    get: operations["findBySiret"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/siret/liensSuccession": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche multicritère sur les liens de succession */
    get: operations["findLienSuccession"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/informations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Ã‰tat du service, dates de mise Ã  jour et numéro de version */
    get: operations["informations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Ensemble des variables d'adresse d'un établissement */
    Adresse: {
      /** @description Complément d'adresse de l'établissement */
      complementAdresseEtablissement?: string;
      /** @description Numéro dans la voie */
      numeroVoieEtablissement?: string;
      /** @description Indice de répétition dans la voie */
      indiceRepetitionEtablissement?: string;
      /** @description Numéro de la dernière adresse dans la voie */
      dernierNumeroVoieEtablissement?: string;
      /** @description Indice de répétition de la dernière adresse dans la voie */
      indiceRepetitionDernierNumeroVoieEtablissement?: string;
      /** @description Type de la voie */
      typeVoieEtablissement?: string;
      /** @description Libellé de la voie */
      libelleVoieEtablissement?: string;
      /** @description Code postal */
      codePostalEtablissement?: string;
      /** @description Libellé de la commune pour les adresses en France */
      libelleCommuneEtablissement?: string;
      /** @description Libellé complémentaire pour une adresse Ã  l'étranger */
      libelleCommuneEtrangerEtablissement?: string;
      /** @description Distribution spéciale (BP par ex) */
      distributionSpecialeEtablissement?: string;
      /** @description Code commune de localisation de lâ€™établissement hors établissements situés Ã  lâ€™étranger (Le code commune est défini dans le <a href='https://www.insee.fr/fr/information/2028028'>code officiel géographique (COG)</a>) */
      codeCommuneEtablissement?: string;
      /** @description Numéro de Cedex */
      codeCedexEtablissement?: string;
      /** @description Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement) */
      libelleCedexEtablissement?: string;
      /** @description Code pays pour les établissements situés Ã  lâ€™étranger */
      codePaysEtrangerEtablissement?: string;
      /** @description Libellé du pays pour les adresses Ã  lâ€™étranger */
      libellePaysEtrangerEtablissement?: string;
      /** @description IdentifiantAdresseEtablissement */
      identifiantAdresseEtablissement?: string;
      /** @description coordonneeLambertAbscisseEtablissement */
      coordonneeLambertAbscisseEtablissement?: string;
      /** @description coordonneeLambertOrdonneeEtablissement */
      coordonneeLambertOrdonneeEtablissement?: string;
    };
    /** @description Ensemble des variables d'adresse complémentaire d'un établissement */
    AdresseComplementaire: {
      /** @description Complément d'adresse de l'établissement */
      complementAdresse2Etablissement?: string;
      /** @description Numéro dans la voie */
      numeroVoie2Etablissement?: string;
      /** @description Indice de répétition dans la voie */
      indiceRepetition2Etablissement?: string;
      /** @description Type de la voie */
      typeVoie2Etablissement?: string;
      /** @description Libellé de la voie */
      libelleVoie2Etablissement?: string;
      /** @description Code postal */
      codePostal2Etablissement?: string;
      /** @description Libellé de la commune pour les adresses en France */
      libelleCommune2Etablissement?: string;
      /** @description Libellé complémentaire pour une adresse Ã  l'étranger */
      libelleCommuneEtranger2Etablissement?: string;
      /** @description Distribution spéciale (BP par ex) */
      distributionSpeciale2Etablissement?: string;
      /** @description Code commune de localisation de lâ€™établissement hors établissements situés Ã  lâ€™étranger (Le code commune est défini dans le <a href='https://www.insee.fr/fr/information/2028028'>code officiel géographique (COG)</a>) */
      codeCommune2Etablissement?: string;
      /** @description Numéro de Cedex */
      codeCedex2Etablissement?: string;
      /** @description Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement) */
      libelleCedex2Etablissement?: string;
      /** @description Code pays pour les établissements situés Ã  lâ€™étranger */
      codePaysEtranger2Etablissement?: string;
      /** @description Libellé du pays pour les adresses Ã  lâ€™étranger */
      libellePaysEtranger2Etablissement?: string;
    };
    /** @description Objet représentant un comptage particulier Ã  l'intérieur d'une facette */
    Comptage: {
      /** @description Modalité comptée */
      valeur?: Record<string, never>;
      /**
       * Format: int64
       * @description Nombre d'éléments correspondant Ã  la modalité comptée
       */
      nombre?: number;
    };
    /** @description Objet représentant un établissement et son historique */
    Etablissement: {
      /**
       * Format: float
       * @description Score de l'élément parmi l'ensemble des éléments répondant Ã  la requête, plus le score est élevé, plus l'élément est haut placé. Le score n'a pas de signification en dehors de la requête et n'est pas comparable aux score d'autres requêtes
       */
      score?: number;
      /** @description Numéro Siren de l'entreprise Ã  laquelle appartient l'établissement */
      siren?: string;
      /** @description Numéro interne de classement de l'établissement */
      nic?: string;
      /** @description Numéro Siret de lâ€™établissement (toujours renseigné) */
      siret?: string;
      /** @description Statut de diffusion de l'établissement */
      statutDiffusionEtablissement?: string;
      /**
       * Format: date
       * @description Date de création de l'établissement, format AAAA-MM-JJ
       */
      dateCreationEtablissement?: string;
      /** @description Tranche dâ€™effectif salarié de lâ€™établissement, valorisée uniquement si lâ€™année correspondante est supérieure ou égale Ã  lâ€™année dâ€™interrogation -3 (sinon, NN) */
      trancheEffectifsEtablissement?: string;
      /** @description Année de la tranche dâ€™effectif salarié de lâ€™établissement, valorisée uniquement si l'année est supérieure ou égale Ã  lâ€™année dâ€™interrogation -3 (sinon, null) */
      anneeEffectifsEtablissement?: string;
      /** @description Code de lâ€™activité exercée par lâ€™artisan inscrit au registre des métiers. Lâ€™APRM est codifiée selon la nomenclature dâ€™Activités FranÃ§aise de lâ€™Artisanat (NAFA) */
      activitePrincipaleRegistreMetiersEtablissement?: string;
      /**
       * Format: date-time
       * @description Date de la dernière mise Ã  jour effectuée au répertoire Sirene sur le Siret concerné (yyyy-MM-ddTHH:mm:ss.SSS)
       * @example 2025-05-10T15:18:50.255
       */
      dateDernierTraitementEtablissement?: string;
      /** @description Indicatrice précisant si le Siret est celui de lâ€™établissement siège ou non */
      etablissementSiege?: boolean;
      /**
       * Format: int32
       * @description Nombre de périodes dans la vie de l'établissement
       */
      nombrePeriodesEtablissement?: number;
      uniteLegale?: components["schemas"]["UniteLegaleEtablissement"];
      adresseEtablissement?: components["schemas"]["Adresse"];
      adresse2Etablissement?: components["schemas"]["AdresseComplementaire"];
      periodesEtablissement?: components["schemas"]["PeriodeEtablissement"][];
    };
    /** @description Objet représentant une facette (un ensemble de comptages selon un champ, une requête ou une série d'intervalles) */
    Facette: {
      /** @description Nom de la facette */
      nom?: string;
      /**
       * Format: int32
       * @description Nombre d'éléments pour lesquels la facette vaut null
       */
      manquants?: number;
      /**
       * Format: int64
       * @description Nombre total d'éléments ayant une valeur non nulle pour la facette
       */
      total?: number;
      /**
       * Format: int32
       * @description Nombre de valeurs distinctes pour la facette
       */
      modalites?: number;
      /**
       * Format: int32
       * @description Nombre d'éléments dont la valeur est inférieure au premier intervalle, uniquement pour les facettes de type intervalle
       */
      avant?: number;
      /**
       * Format: int32
       * @description Nombre d'éléments dont la valeur est supérieure au dernier intervalle, uniquement pour les facettes de type intervalle
       */
      apres?: number;
      /**
       * Format: int32
       * @description Nombre d'élements compris entre la borne inférieure du premier intervalle et la borne supérieure du dernier intervalle, uniquement pour les facettes de type intervalle
       */
      entre?: number;
      comptages?: components["schemas"]["Comptage"][];
    };
    /** @description Informations générales sur le résultat de la requête */
    Header: {
      /**
       * Format: int32
       * @description Ã‰gal au status de la réponse HTTP
       * @example 200
       */
      statut?: number;
      /**
       * @description En cas d'erreur, message indiquant la cause de l'erreur. OK sinon
       * @example OK
       */
      message?: string;
      /**
       * Format: int64
       * @description Nombre total des éléments répondant Ã  la requête
       */
      total?: number;
      /**
       * Format: int64
       * @description Numéro du premier élément fourni, défaut Ã  0, commence Ã  0
       */
      debut?: number;
      /**
       * Format: int64
       * @description Nombre d'éléments fournis, défaut Ã  20
       */
      nombre?: number;
      /** @description Curseur passé en argument dans la requête de l'utilisateur, utilisé pour la pagination profonde */
      curseur?: string;
      /** @description Curseur suivant pour accéder Ã  la suite des résultat lorsqu'on utilise la pagination profonde */
      curseurSuivant?: string;
    };
    /** @description Ensemble des variables historisées de l'établissement entre dateDebut et dateFin */
    PeriodeEtablissement: {
      /**
       * Format: date
       * @description Date de fin de la période, null pour la dernière période, format AAAA-MM-DD
       */
      dateFin?: string;
      /**
       * Format: date
       * @description Date de début de la période, format AAAA-MM-DD
       */
      dateDebut?: string;
      /** @description Ã‰tat administratif de l'établissement pendant la période (A= établissement actif; F= établissement fermé) */
      etatAdministratifEtablissement?: string;
      /** @description Indicatrice de changement de l'état administratif de l'établissement par rapport Ã  la période précédente */
      changementEtatAdministratifEtablissement?: boolean;
      /** @description Première ligne d'enseigne */
      enseigne1Etablissement?: string;
      /** @description Deuxième ligne d'enseigne */
      enseigne2Etablissement?: string;
      /** @description Troisième ligne d'enseigne */
      enseigne3Etablissement?: string;
      /** @description Indicatrice de changement de l'enseigne de l'établissement par rapport Ã  la période précédente (un seul indicateur pour les trois variables Enseigne1, Enseigne2 et Enseigne3). Un seul indicateur pour les trois variables enseigne */
      changementEnseigneEtablissement?: boolean;
      /** @description Nom sous lequel lâ€™activité de lâ€™établissement est connu du public  */
      denominationUsuelleEtablissement?: string;
      /** @description Indicatrice de changement de la dénomination usuelle de lâ€™établissement par rapport Ã  la période précédente */
      changementDenominationUsuelleEtablissement?: boolean;
      /** @description Activité principale de l'établissement pendant la période (l'APE est codifiée selon la <a href='https://www.insee.fr/fr/information/2406147'>nomenclature d'Activités FranÃ§aise (NAF)</a> */
      activitePrincipaleEtablissement?: string;
      /**
       * @description Nomenclature de l'activité, permet de savoir Ã  partir de quelle nomenclature est codifiée ActivitePrincipaleEtablissement
       * @enum {string}
       */
      nomenclatureActivitePrincipaleEtablissement?: "NAP,NAFRev1,NAFRev2,NAF1993";
      /** @description Indicatrice de changement de l'activité principale de l'établissement par rapport Ã  la période précédente */
      changementActivitePrincipaleEtablissement?: boolean;
      /** @description Caractère employeur de l'établissement (O=oui, N=non, null=sans objet) */
      caractereEmployeurEtablissement?: string;
      /** @description Indicatrice de changement du caractère employeur de l'établissement par rapport Ã  la période précédente */
      changementCaractereEmployeurEtablissement?: boolean;
    };
    /** @description Objet renvoyé en cas de succès sur une requête demandant des établissements */
    ReponseEtablissements: {
      header?: components["schemas"]["Header"];
      etablissements?: components["schemas"]["Etablissement"][];
      facettes?: components["schemas"]["Facette"][];
    };
    /** @description Objet représentant les valeurs courante de l'unité légale de l'établissement */
    UniteLegaleEtablissement: {
      /**
       * @description Statut de diffusion de lâ€™unité légale
       * @example O
       */
      statutDiffusionUniteLegale?: string;
      /** @description True si l'unité est une unité purgée */
      unitePurgeeUniteLegale?: boolean;
      /**
       * Format: date
       * @description Date de création de l'unité légale
       * @example AAAA-MM-JJ
       */
      dateCreationUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Date de naissance pour la personne physique sinon null */
      dateNaissanceUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Code commune de naissance pour les personnes physiques, null pour les personnes morales et les personnes physiques nées Ã  lâ€™étranger */
      codeCommuneNaissanceUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Code pays de naissance pour les personnes physiques nées Ã  lâ€™étranger, null sinon */
      codePaysNaissanceUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Nationalité pour les personnes physiques */
      libelleNationaliteUniteLegale?: string;
      /** @description Numéro au Répertoire National des Associations */
      identifiantAssociationUniteLegale?: string;
      /** @description Tranche d'effectif salarié de l'unité légale, valorisé uniquement si l'année correspondante est supérieure ou égale Ã  l'année d'interrogation-3 (sinon, NN) */
      trancheEffectifsUniteLegale?: string;
      /** @description Année de validité de la tranche d'effectif salarié de l'unité légale, valorisée uniquement si l'année est supérieure ou égale Ã  l'année d'interrogation-3 (sinon, null) */
      anneeEffectifsUniteLegale?: string;
      /**
       * Format: AAAA-MM-JJTHH:MM:SS
       * @description Date de la dernière mise Ã  jour effectuée au répertoire Sirene sur le Siren concerné
       */
      dateDernierTraitementUniteLegale?: string;
      /**
       * @description Catégorie Ã  laquelle appartient l'entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise
       * @enum {string}
       */
      categorieEntreprise?: "PME,ETI,GE,null";
      /** @description Année de validité de la catégorie d'entreprise */
      anneeCategorieEntreprise?: string;
      /** @description Sigle de l'unité légale */
      sigleUniteLegale?: string;
      /**
       * @description Sexe pour les personnes physiques sinon null
       * @enum {string}
       */
      sexeUniteLegale?: "M,F,null";
      /** @description Premier prénom déclaré pour une personne physique, peut être null dans le cas d'une unité purgée */
      prenom1UniteLegale?: string;
      /** @description Deuxième prénom déclaré pour une personne physique */
      prenom2UniteLegale?: string;
      /** @description Troisième prénom déclaré pour une personne physique */
      prenom3UniteLegale?: string;
      /** @description Quatrième prénom déclaré pour une personne physique */
      prenom4UniteLegale?: string;
      /** @description Prénom usuel pour les personne physiques, correspond généralement au Prenom1 */
      prenomUsuelUniteLegale?: string;
      /** @description Pseudonyme pour les personnes physiques */
      pseudonymeUniteLegale?: string;
      /**
       * @description Ã‰tat de l'entreprise pendant la période (A= entreprise active, C= entreprise cessée)
       * @enum {string}
       */
      etatAdministratifUniteLegale?: "A,C";
      /** @description Nom de naissance pour les personnes physiques pour la période (null pour les personnes morales) */
      nomUniteLegale?: string;
      /** @description Raison sociale (personnes morales) */
      denominationUniteLegale?: string;
      /** @description Premier nom sous lequel lâ€™entreprise est connue du public */
      denominationUsuelle1UniteLegale?: string;
      /** @description Deuxième nom sous lequel lâ€™entreprise est connue du public */
      denominationUsuelle2UniteLegale?: string;
      /** @description Troisième nom sous lequel lâ€™entreprise est connue du public */
      denominationUsuelle3UniteLegale?: string;
      /** @description Activité principale de l'entreprise pendant la période (l'APE est codifiée selon la <a href='https://www.insee.fr/fr/information/2406147'>nomenclature d'Activités FranÃ§aise (NAF)</a> */
      activitePrincipaleUniteLegale?: string;
      /** @description Catégorie juridique de lâ€™entreprise (=1000 pour les personnes physiques) */
      categorieJuridiqueUniteLegale?: string;
      /** @description Identifiant du siège pour la période (le Siret du siège est obtenu en concaténant le numéro Siren et le NIC) */
      nicSiegeUniteLegale?: string;
      /**
       * @description Nomenclature de l'activité, permet de savoir Ã  partir de quelle nomenclature est codifiée ActivitePrincipale
       * @enum {string}
       */
      nomenclatureActivitePrincipaleUniteLegale?: "NAP,NAFRev1,NAFRev2,NAF1993";
      /** @description Nom dâ€™usage pour les personnes physiques sinon null */
      nomUsageUniteLegale?: string;
      /** @description Appartenance de lâ€™unité légale au champ de lâ€™économie sociale et solidaire (ESS) */
      economieSocialeSolidaireUniteLegale?: string;
      /** @description Appartenance de lâ€™unité légale au champ societé Ã  mission */
      societeMissionUniteLegale?: string;
      /**
       * @description Caractère employeur de l'entreprise. Valeur courante=O si au moins l'un des établissements actifs de l'unité légale emploie des salariés
       * @enum {string}
       */
      caractereEmployeurUniteLegale?: "O,N,null";
    };
    ReponseErreur: {
      header?: components["schemas"]["Header"];
    };
    EtablissementPostMultiCriteres: {
      /**
       * @description Contenu de la requête multicritères, voir la documentation pour plus de précisions
       * @default
       */
      q: string;
      /**
       * Format: AAAA-MM-JJ
       * @description Date Ã  laquelle on veut obtenir les valeurs des données historisées
       * @default
       */
      date: string;
      /**
       * @description Liste des champs demandés, séparés par des virgules
       * @default
       */
      champs: string;
      /**
       * Format: int32
       * @description Nombre d'éléments demandés dans la réponse, défaut 20
       * @default 20
       */
      nombre: number;
      /**
       * Format: int32
       * @description Rang du premier élément demandé dans la réponse, défaut 0
       * @default 0
       */
      debut: number;
      /** @description Masque (true) ou affiche (false, par défaut) les attributs qui n'ont pas de valeur */
      masquerValeursNulles?: boolean;
      /**
       * @description Champs sur lesquels des tris seront effectués, séparés par des virgules. Tri sur siren par défaut
       * @default
       */
      tri: string;
      /**
       * @description Paramètre utilisé pour la pagination profonde, voir la documentation pour plus de précisions
       * @default
       */
      curseur: string;
      /**
       * @description Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules
       * @default
       */
      "facette.champ": string;
    };
    PeriodeUniteLegale: {
      /**
       * Format: date
       * @description Date de fin de la période, null pour la dernière période, format AAAA-MM-DD
       */
      dateFin?: string;
      /**
       * Format: date
       * @description Date de début de la période, format AAAA-MM-DD
       */
      dateDebut?: string;
      /**
       * @description Ã‰tat de l'entreprise pendant la période (A= entreprise active, C= entreprise cessée)
       * @enum {string}
       */
      etatAdministratifUniteLegale?: "A,C";
      /** @description Indicatrice de changement d'état par rapport Ã  la période précédente */
      changementEtatAdministratifUniteLegale?: boolean;
      /** @description Nom de naissance pour les personnes physiques pour la période (null pour les personnes morales) */
      nomUniteLegale?: string;
      /** @description Indicatrice de changement du nom par rapport Ã  la période précédente */
      changementNomUniteLegale?: boolean;
      /** @description Nom dâ€™usage pour les personnes physiques si celui-ci existe, null pour les personnes morales */
      nomUsageUniteLegale?: string;
      /** @description Indicatrice de changement du nom d'usage par rapport Ã  la période précédente */
      changementNomUsageUniteLegale?: boolean;
      /** @description Raison sociale (personnes morales) */
      denominationUniteLegale?: string;
      /** @description Indicatrice de changement de la dénomination par rapport Ã la période précédente */
      changementDenominationUniteLegale?: boolean;
      /** @description Premier nom sous lequel lâ€™entreprise est connue du public */
      denominationUsuelle1UniteLegale?: string;
      /** @description Deuxième nom sous lequel lâ€™entreprise est connue du public */
      denominationUsuelle2UniteLegale?: string;
      /** @description Troisième nom sous lequel lâ€™entreprise est connue du public */
      denominationUsuelle3UniteLegale?: string;
      /** @description Catégorie juridique de l'entreprise (variable Null pour les personnes physiques. (<a href='https://www.insee.fr/fr/information/2028129'>la nomenclature sur insee.fr</a>)) */
      categorieJuridiqueUniteLegale?: string;
      /** @description Indicatrice de changement de la catégorie juridique par rapport Ã  la période précédente */
      changementCategorieJuridiqueUniteLegale?: boolean;
      /** @description Activité principale de l'entreprise pendant la période (l'APE est codifiée selon la <a href='https://www.insee.fr/fr/information/2406147'>nomenclature d'Activités FranÃ§aise (NAF)</a> */
      activitePrincipaleUniteLegale?: string;
      /**
       * @description Nomenclature de l'activité, permet de savoir Ã  partir de quelle nomenclature est codifiée ActivitePrincipale
       * @enum {string}
       */
      nomenclatureActivitePrincipaleUniteLegale?: "NAP,NAFRev1,NAFRev2,NAF1993";
      /** @description Indicatrice de changement de l'activité principale par rapport Ã  la période précédente */
      changementActivitePrincipaleUniteLegale?: boolean;
      /** @description Identifiant du siège pour la période (le Siret du siège est obtenu en concaténant le numéro Siren et le Nic) */
      nicSiegeUniteLegale?: string;
      /** @description Indicatrice de changement du NIC du siège par rapport Ã  la période précédente */
      changementNicSiegeUniteLegale?: boolean;
      /** @description Appartenance de lâ€™unité légale au champ de lâ€™économie sociale et solidaire (ESS) */
      economieSocialeSolidaireUniteLegale?: string;
      /** @description Indicatrice de changement de l'ESS par rapport Ã  la période précédente */
      changementEconomieSocialeSolidaireUniteLegale?: boolean;
      /** @description Appartenance de lâ€™unité légale au champ société Ã  mission (SM) */
      societeMissionUniteLegale?: string;
      /** @description Indicatrice de changement du champ société Ã  mission par rapport Ã  la période précédente */
      changementSocieteMissionUniteLegale?: boolean;
      /**
       * @description Caractère employeur de l'entreprise. Valeur courante=O si au moins l'un des établissements actifs de l'unité légale emploie des salariés
       * @enum {string}
       */
      caractereEmployeurUniteLegale?: "O,N,null";
      /** @description Indicatrice de changement du caractère employeur par rapport Ã  la période précédente */
      changementCaractereEmployeurUniteLegale?: boolean;
      /** @description Indicatrice de changement de la dénomination par rapport Ã la période précédente */
      changementDenominationUsuelleUniteLegale?: boolean;
    };
    /** @description Objet renvoyé en cas de succès sur une requête demandant des unités légales */
    ReponseUnitesLegales: {
      header?: components["schemas"]["Header"];
      unitesLegales?: components["schemas"]["UniteLegale"][];
      facettes?: components["schemas"]["Facette"][];
    };
    UniteLegale: {
      /**
       * Format: float
       * @description Score de l'élément parmi l'ensemble des éléments répondant Ã  la requête, plus le score est élevé, plus l'élément est haut placé. Le score n'a pas de signification en dehors de la requête et n'est pas comparable aux score d'autres requêtes
       */
      score?: number;
      /**
       * @description Numéro Siren de l'entreprise, toujours renseigné
       * @example 005520135
       */
      siren?: string;
      /**
       * @description Statut de diffusion de lâ€™unité légale
       * @example O
       */
      statutDiffusionUniteLegale?: string;
      /** @description True si l'unité est une unité purgée */
      unitePurgeeUniteLegale?: boolean;
      /**
       * Format: date
       * @description Date de création de l'unité légale
       * @example AAAA-MM-JJ
       */
      dateCreationUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Date de naissance pour la personne physique sinon null */
      dateNaissanceUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Code commune de naissance pour les personnes physiques, null pour les personnes morales et les personnes physiques nées Ã  lâ€™étranger */
      codeCommuneNaissanceUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Code pays de naissance pour les personnes physiques nées Ã  lâ€™étranger, null sinon */
      codePaysNaissanceUniteLegale?: string;
      /** @description Lâ€™accès Ã  ces données est soumis Ã  une démarche auprès de la Commission nationale de lâ€™informatique et des libertés. Nationalité pour les personnes physiques */
      libelleNationaliteUniteLegale?: string;
      /** @description Numéro au Répertoire National des Associations */
      identifiantAssociationUniteLegale?: string;
      /** @description Tranche d'effectif salarié de l'unité légale, valorisé uniquement si l'année correspondante est supérieure ou égale Ã  l'année d'interrogation-3 (sinon, NN) */
      trancheEffectifsUniteLegale?: string;
      /** @description Année de validité de la tranche d'effectif salarié de l'unité légale, valorisée uniquement si l'année est supérieure ou égale Ã  l'année d'interrogation-3 (sinon, null) */
      anneeEffectifsUniteLegale?: string;
      /**
       * Format: AAAA-MM-JJTHH:MM:SS
       * @description Date de la dernière mise Ã  jour effectuée au répertoire Sirene sur le Siren concerné
       */
      dateDernierTraitementUniteLegale?: string;
      /**
       * Format: int32
       * @description Nombre de périodes dans la vie de l'unité légale
       */
      nombrePeriodesUniteLegale?: number;
      /**
       * @description Catégorie Ã  laquelle appartient l'entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise
       * @enum {string}
       */
      categorieEntreprise?: "PME,ETI,GE,null";
      /** @description Année de validité de la catégorie d'entreprise */
      anneeCategorieEntreprise?: string;
      /** @description Sigle de l'unité légale */
      sigleUniteLegale?: string;
      /**
       * @description Sexe pour les personnes physiques sinon null
       * @enum {string}
       */
      sexeUniteLegale?: "M,F,null";
      /** @description Premier prénom déclaré pour une personne physique, peut être null dans le cas d'une unité purgée */
      prenom1UniteLegale?: string;
      /** @description Deuxième prénom déclaré pour une personne physique */
      prenom2UniteLegale?: string;
      /** @description Troisième prénom déclaré pour une personne physique */
      prenom3UniteLegale?: string;
      /** @description Quatrième prénom déclaré pour une personne physique */
      prenom4UniteLegale?: string;
      /** @description Prénom usuel pour les personne physiques, correspond généralement au Prenom1 */
      prenomUsuelUniteLegale?: string;
      /** @description Pseudonyme pour les personnes physiques */
      pseudonymeUniteLegale?: string;
      periodesUniteLegale?: components["schemas"]["PeriodeUniteLegale"][];
    };
    UniteLegalePostMultiCriteres: {
      /**
       * @description Contenu de la requête multicritères, voir la documentation pour plus de précisions
       * @default
       */
      q: string;
      /**
       * Format: AAAA-MM-JJ
       * @description Date Ã  laquelle on veut obtenir les valeurs des données historisées
       * @default
       */
      date: string;
      /**
       * @description Liste des champs demandés, séparés par des virgules
       * @default
       */
      champs: string;
      /**
       * Format: int32
       * @description Nombre d'éléments demandés dans la réponse, défaut 20
       * @default 20
       */
      nombre: number;
      /**
       * Format: int32
       * @description Rang du premier élément demandé dans la réponse, défaut 0
       * @default 0
       */
      debut: number;
      /** @description Masque (true) ou affiche (false, par défaut) les attributs qui n'ont pas de valeur */
      masquerValeursNulles?: boolean;
      /**
       * @description Champs sur lesquels des tris seront effectués, séparés par des virgules. Tri sur siren par défaut
       * @default
       */
      tri: string;
      /**
       * @description Paramètre utilisé pour la pagination profonde, voir la documentation pour plus de précisions
       * @default
       */
      curseur: string;
      /**
       * @description Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules
       * @default
       */
      "facette.champ": string;
    };
    /** @description Objet renvoyé en cas de succès sur une requête demandant un établissement */
    ReponseEtablissement: {
      header?: components["schemas"]["Header"];
      etablissement?: components["schemas"]["Etablissement"];
    };
    LienSuccession: {
      /** @description Numéro Siret de l'établissement prédécesseur */
      siretEtablissementPredecesseur?: string;
      /** @description Numéro Siret de l'établissement successeur */
      siretEtablissementSuccesseur?: string;
      /**
       * Format: date
       * @description Date d'effet du lien de succession, au format AAAA-MM-JJ
       */
      dateLienSuccession?: string;
      /** @description Indicatrice de transfert de siège */
      transfertSiege?: boolean;
      /** @description Indicatrice de continuité économique entre les deux établissements */
      continuiteEconomique?: boolean;
      /**
       * Format: date-time
       * @description Date de traitement du lien de succession, au format yyyy-MM-ddTHH:mm:ss.SSS
       * @example 2025-05-10T15:18:50.255
       */
      dateDernierTraitementLienSuccession?: string;
    };
    /** @description Objet renvoyé en cas de succès sur une requête demandant les prédécesseurs d'un établissement */
    ReponseLienSuccession: {
      header?: components["schemas"]["Header"];
      liensSuccession?: components["schemas"]["LienSuccession"][];
    };
    /** @description Objet renvoyé en cas de succès sur une requête demandant un ou unité légale */
    ReponseUniteLegale: {
      header?: components["schemas"]["Header"];
      uniteLegale?: components["schemas"]["UniteLegale"];
    };
    /** @description Dates des dernières mises Ã  jour de chaque collection de données */
    DatesMiseAJourDonnees: {
      /**
       * @description Nom de la collection
       * @enum {string}
       */
      collection?: "Unités Légales, Ã‰tablissements";
      /**
       * Format: date-time
       * @description Date et heure (yyyy-MM-ddTHH:mm:ss.SSS) de la dernière mise Ã  disposition des données de la collection
       * @example 2025-05-10T15:18:50.255
       */
      dateDerniereMiseADisposition?: string;
      /**
       * Format: date-time
       * @description Date (yyyy-MM-ddTHH:mm:ss.SSS) correspondant Ã  la date de validité des données consultées
       * @example 2025-05-10T15:18:50.255
       */
      dateDernierTraitementMaximum?: string;
      /**
       * Format: date-time
       * @description Date (yyyy-MM-ddTHH:mm:ss.SSS) du dernier traitement de masse sur la collection. Ã€ cette date plusieurs centaines de milliers de documents ont pu être mis Ã  jour. Il est conseillé de traiter cette date d'une manière spécifique
       * @example 2025-05-10T15:18:50.255
       */
      dateDernierTraitementDeMasse?: string;
    };
    EtatCollection: {
      /** @description Collection */
      Collection?: string;
      /**
       * @description Etat du service
       * @enum {string}
       */
      etatCollection?: "UP,DOWN";
    };
    /** @description Objet renvoyé en cas de requête demandant les informations sur le service */
    ReponseInformations: {
      header?: components["schemas"]["Header"];
      /**
       * @description Ã‰tat actuel du service
       * @enum {string}
       */
      etatService?: "UP,DOWN";
      /** @description Etats des services */
      etatsDesServices?: components["schemas"]["EtatCollection"][];
      /** @description Numéro de la version */
      versionService?: string;
      /** @description Historique des versions de l'API Sirene */
      journalDesModifications?: string;
      /** @description Dates des dernières mises Ã  jour de chaque collection de données */
      datesDernieresMisesAJourDesDonnees?: components["schemas"]["DatesMiseAJourDonnees"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  findByGetUniteLegale: {
    parameters: {
      query?: {
        /** @description Contenu de la requête multicritères, voir la documentation pour plus de précisions */
        q?: string;
        /** @description Date Ã  laquelle on veut obtenir les valeurs des données historisées */
        date?: string;
        /** @description Liste des champs demandés, séparés par des virgules */
        champs?: string;
        /** @description Masque (true) ou affiche (false, par défaut) les attributs qui n'ont pas de valeur */
        masquerValeursNulles?: boolean;
        /** @description Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules */
        "facette.champ"?: string;
        /** @description Champs sur lesquels des tris seront effectués, séparés par des virgules. Tri sur siren par défaut */
        tri?: string;
        /** @description Nombre d'éléments demandés dans la réponse, défaut 20 */
        nombre?: number;
        /** @description Rang du premier élément demandé dans la réponse, défaut 0 */
        debut?: number;
        /** @description Paramètre utilisé pour la pagination profonde, voir la documentation pour plus de précisions */
        curseur?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Requête traitée avec succès */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=utf-8;qs=1": components["schemas"]["ReponseUnitesLegales"];
          "text/csv;charset=utf-8;qs=0.9": unknown;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Entreprise non trouvée dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 9 chiffres ne correspond pas Ã  un Siren présent dans la base ; si le paramètre a été utilisé, le Siren peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Requête trop longue */
      414: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  findByPostUniteLegale: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["UniteLegalePostMultiCriteres"];
      };
    };
    responses: {
      /** @description Requête traitée avec succès */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=utf-8;qs=1": components["schemas"]["ReponseUnitesLegales"];
          "text/csv;charset=utf-8;qs=0.9": unknown;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Entreprise non trouvée dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 9 chiffres ne correspond pas Ã  un Siren présent dans la base ; si le paramètre a été utilisé, le Siren peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Requête trop longue */
      414: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  findBySiren: {
    parameters: {
      query?: {
        /** @description Date Ã  laquelle on veut obtenir les valeurs des données historisées */
        date?: string;
        /** @description Liste des champs demandés, séparés par des virgules */
        champs?: string;
        /** @description Masque (true) ou affiche (false, par défaut) les attributs qui n'ont pas de valeur */
        masquerValeursNulles?: boolean;
      };
      header?: never;
      path: {
        /** @description Identifiant de l'unité légale (9 chiffres) */
        siren: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Unité légale trouvée */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseUniteLegale"];
        };
      };
      /** @description Unité légale fermée pour cause de doublon */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=utf-8;qs=1": string;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Droits insuffisants pour consulter les données de cette unité */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Entreprise non trouvée dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 9 chiffres ne correspond pas Ã  un Siren présent dans la base ; si le paramètre a été utilisé, le Siren peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  findByGetEtablissement: {
    parameters: {
      query?: {
        /** @description Contenu de la requête multicritères, voir la documentation pour plus de précisions */
        q?: string;
        /** @description Date Ã  laquelle on veut obtenir les valeurs des données historisées */
        date?: string;
        /** @description Liste des champs demandés, séparés par des virgules */
        champs?: string;
        /** @description Masque (true) ou affiche (false, par défaut) les attributs qui n'ont pas de valeur */
        masquerValeursNulles?: string;
        /** @description Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules */
        "facette.champ"?: string;
        /** @description Champs sur lesquels des tris seront effectués, séparés par des virgules. Tri sur siren par défaut */
        tri?: string;
        /** @description Nombre d'éléments demandés dans la réponse, défaut 20 */
        nombre?: string;
        /** @description Rang du premier élément demandé dans la réponse, défaut 0 */
        debut?: string;
        /** @description Paramètre utilisé pour la pagination profonde, voir la documentation pour plus de précisions */
        curseur?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=utf-8;qs=1": components["schemas"]["ReponseEtablissements"];
          "text/csv;charset=utf-8;qs=0.9": unknown;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Etablissement non trouvé dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 14 chiffres ne correspond pas Ã  un Siret présent dans la base ; si le paramètre date a été utilisé, le Siret peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Requête trop longue */
      414: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  findByPostEtablissement: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["EtablissementPostMultiCriteres"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=utf-8;qs=1": components["schemas"]["ReponseEtablissements"];
          "text/csv;charset=utf-8;qs=0.9": unknown;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Etablissement non trouvé dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 14 chiffres ne correspond pas Ã  un Siret présent dans la base ; si le paramètre date a été utilisé, le Siret peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Requête trop longue */
      414: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  findBySiret: {
    parameters: {
      query?: {
        /** @description Date Ã  laquelle on veut obtenir les valeurs des données historisées */
        date?: string;
        /** @description Liste des champs demandés, séparés par des virgules */
        champs?: string;
        /** @description Masque (true) ou affiche (false, par défaut) les attributs qui n'ont pas de valeur */
        masquerValeursNulles?: string;
      };
      header?: never;
      path: {
        /** @description Identifiant de l'établissement (14 chiffres) */
        siret: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ã‰tablissement trouvé */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseEtablissement"];
        };
      };
      /** @description Ã‰tablissement d'une unité légale fermée pour cause de doublon */
      301: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Droits insuffisants pour consulter les données de cette unité */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Etablissement non trouvé dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 14 chiffres ne correspond pas Ã  un Siret présent dans la base ; si le paramètre date a été utilisé, le Siret peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  findLienSuccession: {
    parameters: {
      query?: {
        /** @description Contenu de la requête multicritères, voir la documentation pour plus de précisions */
        q?: string;
        /** @description Permet de trier sur la variable siretEtablissementSuccesseur au lieu de siretEtablissementPredecesseur */
        tri?: "successeur";
        /** @description Nombre d'éléments demandés dans la réponse, défaut 20 */
        nombre?: string;
        /** @description Rang du premier élément demandé dans la réponse, défaut 0 */
        debut?: string;
        /** @description Paramètre utilisé pour la pagination profonde, voir la documentation pour plus de précisions */
        curseur?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json;charset=utf-8;qs=1": components["schemas"]["ReponseLienSuccession"];
          "text/csv;charset=utf-8;qs=0.9": unknown;
        };
      };
      /** @description Nombre incorrect de paramètres ou les paramètres sont mal formatés */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Jeton d'accès manquant ou invalide */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Etablissement non trouvé dans la base Sirene (si le paramètre date n'a pas été utilisé, cela peut signifier que le numéro de 14 chiffres ne correspond pas Ã  un Siret présent dans la base ; si le paramètre date a été utilisé, le Siret peut exister mais la date de création est postérieure au paramètre date) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Le paramètre 'Accept' de l'en-tête HTTP contient une valeur non prévue */
      406: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Quota d'interrogations de l'API dépassé */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Erreur interne du serveur */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
  informations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Requête traitée avec succès */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseInformations"];
        };
      };
      /** @description Service indisponible */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseErreur"];
        };
      };
    };
  };
}
