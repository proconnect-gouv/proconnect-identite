/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/sso/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Obtenir le token à envoyer dans le Headers */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": {
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Requête traitée avec succès */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ResponseToken"];
          };
        };
        /** @description Requête invalide */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Requête interdite */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Erreur interne du serveur */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/companies/{siren}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Recherche d'une entreprise par son numéro Siren
     * @description Recherche d'une entreprise par son numéro Siren (9 chiffres)
     */
    get: operations["findBySiren"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Beneficiaire: {
      descriptionPersonne?: {
        /** Format: AAAA-MM-JJ */
        dateDeNaissance?: string;
        /** @description Nom de naissance */
        nom?: string;
        prenoms?: string[];
        /**
         * @description Genre
         * @enum {string}
         */
        genre?: "1" | "2";
        /** @description Pays de naissance */
        paysNaissance?: string;
        /** @description Lieu de naissance */
        lieuDeNaissance?: string;
        /** @description Code postal de naissance */
        codePostalNaissance?: string;
        /** @description Code insee de la commune de naissance */
        codeInseeGeographique?: string;
      };
    };
    Error: {
      /**
       * @description Code de l'erreur
       * @example 401
       * @enum {string}
       */
      code?: "401" | "403" | "404" | "500";
      /**
       * @description Code d'erreur
       * @example connection_type_not_allowed
       */
      errorCode?: string;
      /**
       * @description Message d'erreur
       * @example Accès impossible
       */
      message?: string;
      /**
       * @description Type d'erreur
       * @example access_forbidden
       */
      type?: string;
      /**
       * @description Code du service web
       * @example api_sso_post_login_password
       */
      webserviceCode?: string;
    };
    /** @description Objet renvoyé en cas de succès sur une requête de type entreprise */
    ReponseCompany: {
      /** @description Identifiant de l'entreprise */
      id?: string;
      formality?: {
        content?: Record<string, never>;
        /** @description Diffusion dans l'INSEE */
        diffusionINSEE?: string;
        personneMorale?: {
          beneficiairesEffectifs?: {
            /** @description Actif ou non */
            actif?: boolean;
            /** @description Identifiant du bénéficiaire */
            beneficiaireId?: string;
            beneficiaire?: components["schemas"]["Beneficiaire"];
          }[];
        };
      };
      /** @description Numéro Siren de l'entreprise */
      siren?: string;
    };
    /** @description Objet renvoyé en cas de succès sur une requête de type token */
    ResponseToken: {
      /** @description Jeton d'accès */
      token?: string;
      user?: {
        /** @description Email de l'utilisateur */
        email?: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  findBySiren: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifiant de l'entreprise (9 chiffres) */
        siren: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Companie trouvée */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReponseCompany"];
        };
      };
    };
  };
}
